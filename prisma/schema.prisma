generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Organize Cron Jobs
  lastUpdatedListeningHistoryAt DateTime?
  isUpdatingListeningHistory    Boolean   @default(false)

  // Relationships
  lastfmAccount LastfmAccount?
  LastfmListen  LastfmListen[]
  Listen        Listen[]
}

model AccessToken {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime
  token         String   @db.VarChar(255)
  refreshToken  String   @db.VarChar(255)
  userIdService String   @unique // ${userId}-${service}

  @@index([userIdService], map: "AccessToken_userIdService")
}

model LastfmAccount {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  registeredAt DateTime
  url          String
  playCount    Int
  trackCount   Int
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
}

model LastfmListen {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          Int
  listenedAt      DateTime
  trackName       String    @db.VarChar(320)
  artistName      String    @db.VarChar(320)
  trackData       Json
  analyzedAt      DateTime?
  isBeingAnalyzed Boolean   @default(false)

  User   User    @relation(fields: [userId], references: [id])
  Listen Listen?

  @@index([userId], map: "LastfmListen_userId")
  @@index([trackName, artistName], map: "LastfmListen_trackName_artistName")
  @@index([isBeingAnalyzed, analyzedAt], map: "LastfmListen_isBeingAnalyzed_analyzedAt")
}

model Listen {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listenedAt DateTime

  userId         Int
  trackId        Int
  lastfmListenId Int? @unique

  User         User          @relation(fields: [userId], references: [id])
  Track        Track         @relation(fields: [trackId], references: [id])
  LastfmListen LastfmListen? @relation(fields: [lastfmListenId], references: [id])

  @@index([userId], map: "Listen_userId")
  @@index([trackId], map: "Listen_trackId")
  @@index([lastfmListenId], map: "Listen_lastfmListenId")
}

model Track {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Track Metadata
  name      String
  spotifyId String  @unique
  imageUrl  String?

  // Relationships
  artists                       Artist[]
  listens                       Listen[]
  SpotifyTrackSearchQueueEvents SpotifyTrackSearchQueue[]

  // External Ids
  mbid                       String? // @unique
  internationalRecordingCode String? @unique
  internationalArticleNumber String? @unique
  universalProductCode       String? @unique

  // Track Features
  acousticness     Float? // 0.0 to 1.0
  danceability     Float? // 0.0 to 1.0
  durationMs       Int? // Milliseconds
  energy           Float? // 0.0 to 1.0
  instrumentalness Float? // 0.0 to 1.0
  key              Int? // 0 to 11 //TODO: Consider using a TINYINT manually
  liveness         Float? // 0.0 to 1.0
  loudness         Float? // -60.0 to 0.0 //TODO: Consider using a SMALLINT manually
  mode             Mode? // Major or Minor
  speechiness      Float? // 0.0 to 1.0
  tempo            Float? // BPM
  timeSignature    Int? // 3 to 7 //TODO: Consider using a TINYINT manually
  valence          Float? // 0.0 to 1.0

  // Analysis Tracking
  featuresAnalyzedAt DateTime?

  // Indexes
  @@index([spotifyId], map: "Track_spotifyId")
}

enum Mode {
  Major
  Minor
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  spotifyId String   @unique
  tracks    Track[]

  @@index([spotifyId], map: "Artist_spotifyId")
}

model SpotifyTrackSearchQueue {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  trackName  String
  artistName String
  searchedAt DateTime?
  trackId    Int?
  Track      Track?    @relation(fields: [trackId], references: [id])

  // we could create this index, but it's not clear that we would 
  // ever need to search for a track by its id
  // @@index([trackId], map: "SpotifyTrackSearchQueue_trackId") 

  // consideration - this will create an index on trackName and artistName
  @@unique([trackName, artistName], map: "SpotifyTrackSearchQueue_trackName_artistName_unique")
}
