openapi: "3.0.0"
info:
  version: 0.1.0
  title: Music Taste Explorer
  description: >-
    Create playlists to explore differences and similarities in users' musical tastes.
  contact:
    name: Adam Bechtold
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Operations related to users.
  - name: music
    description: Operations related to music.
  - name: authentication
    description: Operations related to authentication.
paths:
  /api/users:
    get:
      summary: Get Users
      description: Get all users
      operationId: getUsers
      tags:
        - users
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      summary: Create User by Lastfm Username
      description: Create a user by their lastfm username. The operation idempotent based on the username. You can't create multiple users with the same username.
      operationId: createUserByLastfmUsername
      tags:
        - users
      requestBody:
        description: The lastfm username of the user to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lastfmUsername:
                  type: string
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: A user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid API Key or no API Key supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users/{userId}:
    get:
      summary: Get User by Id
      description: Get a user by their id
      operationId: getUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: A user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid API Key or no API Key supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/music/play-tracks:
    put:
      summary: Play Tracks
      description: Plays the provided tracks. This will always affect user 1 (per-user control coming soon).
      operationId: playTracks
      tags:
        - music
      requestBody:
        description: The tracks to play
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trackIds:
                  type: array
                  items:
                    type: integer
                offset:
                  type: integer
                  description: The offset to start playing the tracks at.
                  default: 0
      security:
        - SessionAuth: []
      responses:
        "200":
          description: An error has occurred. Check the message for more details. (This needs to be 200 because the response is html for a snackbar error. I couldn't get the response-targets extension working to support rendering responses with error codes. (https://htmx.org/extensions/response-targets/))
        "204":
          description: Tracks played successfully
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/music/playlists:
    get:
      summary: Get Playlist
      description: Get a playlist based on the users and the preference type
      operationId: getPlaylist
      tags:
        - music
      parameters:
        - name: userId1
          in: query
          description: The id of the first user
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - name: userId2
          in: query
          description: The id of the second user
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - name: preferenceType
          in: query
          description: The type of preference to use when creating the playlist
          required: true
          schema:
            type: string
            enum:
              - "USER1-ONLY"
              - "USER2-ONLY"
              - "BOTH"
      responses:
        "200":
          description: A list of tracks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
  /api/music/tracks:
    get:
      summary: Get Tracks
      description: Get Tracks that fit the query
      operationId: getTracks
      tags:
        - music
      parameters:
        - name: name
          in: query
          description: The name of the track
          required: false
          schema:
            type: string
        - name: artist
          in: query
          description: The name of the artist
          required: false
          schema:
            type: string
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Track(s) that fit the query
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Track"
        "400":
          description: Invalid Query Parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid API Key or no API Key supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Track(s) not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/music/lastfm-listens/{id}/track:
    get:
      summary: Get Track from last.fm Listen
      description: Get the Track for a given last.fm listen. If the track is not found in the database, it will be created by searching Spotify.
      operationId: getTrackFromLastfmListen
      tags:
        - music
      parameters:
        - name: id
          in: path
          description: The id of the last.fm listen
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: A track object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid API Key or no API Key supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: last.fm Listen not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/spotify/token:
    get:
      summary: Get Spotify Access Token
      description: Get a Spotify temporary access token for the current session.
      operationId: getSpotifyAccessToken
      tags:
        - authentication
      security:
        - SessionAuth: []
      responses:
        "200":
          description: A Spotify access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          description: User is not authorized or no user is signed in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-token
    SessionAuth:
      type: apiKey
      in: cookie
      name: connect.id
  schemas:
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
        lastfmAccount:
          $ref: "#/components/schemas/LastfmAccount"
    LastfmAccount:
      type: object
      required:
        - username
        - registeredAt
        - url
        - playCount
        - trackCount
      properties:
        username:
          type: string
        registeredAt:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        playCount:
          type: integer
        trackCount:
          type: integer
    Playlist:
      type: object
      required:
        - tracks
      properties:
        tracks:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Track"
    Track:
      type: object
      required:
        - name
        - artists
      properties:
        id:
          type: integer
        name:
          type: string
        imageUrl:
          type: string
          format: uri
        artists:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
    UserId:
      type: integer
      minimum: 1
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    AccessToken:
      type: object
      required:
        - accessToken
      properties:
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
        service:
          type: string
          enum: ["SPOTIFY"]
